// Code generated by protoc-gen-go.
// source: intangible.proto
// DO NOT EDIT!

/*
Package Intangible is a generated protocol buffer package.

It is generated from these files:
	intangible.proto

It has these top-level messages:
	Vector
	Source
	Mesh
	Texture
	Rendering
	API
	Object
	WavefrontOBJ
	UnitGeometry
*/
package Intangible

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UnitGeometry_Form int32

const (
	UnitGeometry_CUBE     UnitGeometry_Form = 0
	UnitGeometry_CYLINDER UnitGeometry_Form = 1
	UnitGeometry_SPHERE   UnitGeometry_Form = 2
)

var UnitGeometry_Form_name = map[int32]string{
	0: "CUBE",
	1: "CYLINDER",
	2: "SPHERE",
}
var UnitGeometry_Form_value = map[string]int32{
	"CUBE":     0,
	"CYLINDER": 1,
	"SPHERE":   2,
}

func (x UnitGeometry_Form) String() string {
	return proto.EnumName(UnitGeometry_Form_name, int32(x))
}
func (UnitGeometry_Form) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type Vector struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Source struct {
	// uri can be any web-retrievable URL, or a primitive under the "unit" schema, such as "unit:cube" or "unit:sphere". If archive is set, uri can be a relative path within the object that archive references.
	Uri     string  `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	Archive *Source `protobuf:"bytes,2,opt,name=archive" json:"archive,omitempty"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Source) GetArchive() *Source {
	if m != nil {
		return m.Archive
	}
	return nil
}

type Mesh struct {
	Source   *Source `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Rescale  *Vector `protobuf:"bytes,2,opt,name=rescale" json:"rescale,omitempty"`
	Rotation *Vector `protobuf:"bytes,3,opt,name=rotation" json:"rotation,omitempty"`
}

func (m *Mesh) Reset()                    { *m = Mesh{} }
func (m *Mesh) String() string            { return proto.CompactTextString(m) }
func (*Mesh) ProtoMessage()               {}
func (*Mesh) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Mesh) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Mesh) GetRescale() *Vector {
	if m != nil {
		return m.Rescale
	}
	return nil
}

func (m *Mesh) GetRotation() *Vector {
	if m != nil {
		return m.Rotation
	}
	return nil
}

type Texture struct {
	Source *Source `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
}

func (m *Texture) Reset()                    { *m = Texture{} }
func (m *Texture) String() string            { return proto.CompactTextString(m) }
func (*Texture) ProtoMessage()               {}
func (*Texture) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Texture) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type Rendering struct {
	Mesh    *Mesh         `protobuf:"bytes,2,opt,name=mesh" json:"mesh,omitempty"`
	Texture *Texture      `protobuf:"bytes,3,opt,name=texture" json:"texture,omitempty"`
	Obj     *WavefrontOBJ `protobuf:"bytes,4,opt,name=obj" json:"obj,omitempty"`
	Geom    *UnitGeometry `protobuf:"bytes,5,opt,name=geom" json:"geom,omitempty"`
}

func (m *Rendering) Reset()                    { *m = Rendering{} }
func (m *Rendering) String() string            { return proto.CompactTextString(m) }
func (*Rendering) ProtoMessage()               {}
func (*Rendering) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Rendering) GetMesh() *Mesh {
	if m != nil {
		return m.Mesh
	}
	return nil
}

func (m *Rendering) GetTexture() *Texture {
	if m != nil {
		return m.Texture
	}
	return nil
}

func (m *Rendering) GetObj() *WavefrontOBJ {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *Rendering) GetGeom() *UnitGeometry {
	if m != nil {
		return m.Geom
	}
	return nil
}

type API struct {
	// if endpoint is ws://, treat as connection to another server.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	// TODO(dichro): standardized API IDs, to readily identify operations like transfer to another room, moving self/other, pick up/drop objects, etc.
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// TODO(dichro): schema for request+reply. Avro? There appears to be no easily accessible protobuf, thrift, or json-schema IDL parser that'll work with Unity.
	AvroRequestSchema string `protobuf:"bytes,4,opt,name=avro_request_schema,json=avroRequestSchema" json:"avro_request_schema,omitempty"`
}

func (m *API) Reset()                    { *m = API{} }
func (m *API) String() string            { return proto.CompactTextString(m) }
func (*API) ProtoMessage()               {}
func (*API) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Object struct {
	Id          string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Position    *Vector    `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Rendering   *Rendering `protobuf:"bytes,3,opt,name=rendering" json:"rendering,omitempty"`
	Rotation    *Vector    `protobuf:"bytes,4,opt,name=rotation" json:"rotation,omitempty"`
	BoundingBox *Vector    `protobuf:"bytes,5,opt,name=bounding_box,json=boundingBox" json:"bounding_box,omitempty"`
	Removed     bool       `protobuf:"varint,6,opt,name=removed" json:"removed,omitempty"`
	Api         []*API     `protobuf:"bytes,7,rep,name=api" json:"api,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Object) GetPosition() *Vector {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Object) GetRendering() *Rendering {
	if m != nil {
		return m.Rendering
	}
	return nil
}

func (m *Object) GetRotation() *Vector {
	if m != nil {
		return m.Rotation
	}
	return nil
}

func (m *Object) GetBoundingBox() *Vector {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

func (m *Object) GetApi() []*API {
	if m != nil {
		return m.Api
	}
	return nil
}

type WavefrontOBJ struct {
	// obj is a Wavefront .OBJ mesh file.
	Obj *Source `protobuf:"bytes,1,opt,name=obj" json:"obj,omitempty"`
	// mtls lists material files referenced by obj.
	Mtls map[string]*Source `protobuf:"bytes,2,rep,name=mtls" json:"mtls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// maps lists texture files referenced by obj.
	Maps map[string]*Source `protobuf:"bytes,3,rep,name=maps" json:"maps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WavefrontOBJ) Reset()                    { *m = WavefrontOBJ{} }
func (m *WavefrontOBJ) String() string            { return proto.CompactTextString(m) }
func (*WavefrontOBJ) ProtoMessage()               {}
func (*WavefrontOBJ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WavefrontOBJ) GetObj() *Source {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *WavefrontOBJ) GetMtls() map[string]*Source {
	if m != nil {
		return m.Mtls
	}
	return nil
}

func (m *WavefrontOBJ) GetMaps() map[string]*Source {
	if m != nil {
		return m.Maps
	}
	return nil
}

type UnitGeometry struct {
	Form    UnitGeometry_Form `protobuf:"varint,1,opt,name=form,enum=Intangible.UnitGeometry_Form" json:"form,omitempty"`
	Rescale *Vector           `protobuf:"bytes,2,opt,name=rescale" json:"rescale,omitempty"`
}

func (m *UnitGeometry) Reset()                    { *m = UnitGeometry{} }
func (m *UnitGeometry) String() string            { return proto.CompactTextString(m) }
func (*UnitGeometry) ProtoMessage()               {}
func (*UnitGeometry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UnitGeometry) GetRescale() *Vector {
	if m != nil {
		return m.Rescale
	}
	return nil
}

func init() {
	proto.RegisterType((*Vector)(nil), "Intangible.Vector")
	proto.RegisterType((*Source)(nil), "Intangible.Source")
	proto.RegisterType((*Mesh)(nil), "Intangible.Mesh")
	proto.RegisterType((*Texture)(nil), "Intangible.Texture")
	proto.RegisterType((*Rendering)(nil), "Intangible.Rendering")
	proto.RegisterType((*API)(nil), "Intangible.API")
	proto.RegisterType((*Object)(nil), "Intangible.Object")
	proto.RegisterType((*WavefrontOBJ)(nil), "Intangible.WavefrontOBJ")
	proto.RegisterType((*UnitGeometry)(nil), "Intangible.UnitGeometry")
	proto.RegisterEnum("Intangible.UnitGeometry_Form", UnitGeometry_Form_name, UnitGeometry_Form_value)
}

func init() { proto.RegisterFile("intangible.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xfe, 0xc7, 0x71, 0x93, 0xf8, 0x34, 0xea, 0x6f, 0xa6, 0x42, 0xb2, 0x2a, 0x21, 0x15, 0x8b,
	0x45, 0x55, 0x41, 0x24, 0x5a, 0x81, 0x10, 0x3b, 0x5a, 0x42, 0x2f, 0x50, 0x5a, 0x4d, 0x29, 0x88,
	0x55, 0x64, 0x27, 0xd3, 0xc6, 0x25, 0xf6, 0x98, 0xb1, 0x1d, 0x25, 0x7d, 0x01, 0x1e, 0x82, 0x15,
	0x3c, 0x06, 0x0b, 0x9e, 0x8d, 0x33, 0xe3, 0x4b, 0x8d, 0x48, 0xa8, 0x2a, 0x76, 0x73, 0x7c, 0xbe,
	0xef, 0x5c, 0x3f, 0x1f, 0xb0, 0x83, 0x28, 0xf5, 0xa2, 0x8b, 0xc0, 0x1f, 0xf3, 0x6e, 0x2c, 0x45,
	0x2a, 0x28, 0x1c, 0x54, 0x5f, 0xdc, 0x2d, 0x68, 0xbe, 0xe7, 0x83, 0x54, 0x48, 0xda, 0x01, 0x32,
	0x75, 0xc8, 0x3a, 0xd9, 0x30, 0x18, 0x99, 0x2a, 0x6b, 0xe6, 0x18, 0xb9, 0x35, 0x53, 0xd6, 0x95,
	0xd3, 0xc8, 0xad, 0x2b, 0x77, 0x1f, 0x9a, 0xa7, 0x22, 0x93, 0x03, 0x4e, 0x6d, 0x68, 0x64, 0x32,
	0xd0, 0x2c, 0x8b, 0xa9, 0x27, 0x7d, 0x08, 0x2d, 0x4f, 0x0e, 0x46, 0xc1, 0x84, 0x6b, 0xf6, 0xf2,
	0x16, 0xed, 0x5e, 0x67, 0xeb, 0xe6, 0x34, 0x56, 0x42, 0xdc, 0xef, 0x04, 0xcc, 0x23, 0x9e, 0x8c,
	0xe8, 0x26, 0x34, 0x13, 0xed, 0x73, 0xcc, 0x85, 0xac, 0x02, 0xa1, 0x52, 0x48, 0x9e, 0x0c, 0xbc,
	0xf1, 0xdc, 0x14, 0x79, 0x37, 0xac, 0x84, 0xd0, 0x2e, 0xb4, 0xb1, 0x69, 0x2f, 0x0d, 0x44, 0xa4,
	0x3b, 0x98, 0x0f, 0xaf, 0x30, 0x87, 0x66, 0x9b, 0xd8, 0x06, 0x83, 0x3c, 0x57, 0x1f, 0x5b, 0x72,
	0xf7, 0xa0, 0xf5, 0x8e, 0x4f, 0xd3, 0x4c, 0xf2, 0xdb, 0x94, 0x39, 0x27, 0xd0, 0x0f, 0x02, 0x16,
	0xe3, 0xd1, 0x90, 0xcb, 0x20, 0xba, 0xa0, 0x0f, 0xc0, 0x0c, 0xb1, 0xf5, 0xa2, 0x07, 0xbb, 0x1e,
	0x49, 0x8d, 0x84, 0x69, 0x2f, 0x7d, 0x04, 0xad, 0x34, 0x4f, 0x5e, 0x54, 0xbf, 0x5a, 0x07, 0x16,
	0x75, 0xb1, 0x12, 0x83, 0x05, 0x36, 0x84, 0x7f, 0x59, 0x54, 0xe7, 0xd4, 0xa1, 0x1f, 0xbc, 0x09,
	0x3f, 0x97, 0x22, 0x4a, 0x8f, 0x77, 0x0e, 0x99, 0x02, 0xe1, 0x1c, 0xcd, 0x0b, 0x2e, 0x42, 0x67,
	0xe9, 0x4f, 0xf0, 0x59, 0x14, 0xa4, 0x7b, 0xe8, 0xe3, 0xa9, 0x9c, 0x31, 0x8d, 0x72, 0xbf, 0x10,
	0x68, 0xbc, 0x38, 0x39, 0xa0, 0x6b, 0xd0, 0xc6, 0x16, 0x62, 0x81, 0xaa, 0x2a, 0xf6, 0x5e, 0xd9,
	0x94, 0x82, 0x19, 0x79, 0x61, 0xbe, 0x16, 0x8b, 0xe9, 0x37, 0x5d, 0x87, 0xe5, 0x21, 0xae, 0x42,
	0x06, 0x71, 0xb5, 0x02, 0x8b, 0xd5, 0x3f, 0xe1, 0x86, 0x56, 0xbd, 0x89, 0x14, 0x7d, 0xc9, 0x3f,
	0x67, 0x3c, 0x49, 0xfb, 0xc9, 0x60, 0xc4, 0x43, 0x4f, 0xf7, 0x60, 0xb1, 0x3b, 0xca, 0xc5, 0x72,
	0xcf, 0xa9, 0x76, 0xb8, 0xdf, 0x0c, 0x68, 0x1e, 0xfb, 0x97, 0xb8, 0x38, 0xba, 0x02, 0x46, 0x30,
	0x2c, 0xca, 0xc0, 0x97, 0x5a, 0x76, 0x2c, 0x92, 0x40, 0x67, 0x5a, 0xac, 0x8d, 0x0a, 0x43, 0xb7,
	0xc1, 0x92, 0xe5, 0x42, 0x8a, 0xf9, 0xde, 0xad, 0x13, 0xaa, 0x6d, 0xb1, 0x6b, 0xdc, 0x6f, 0x8a,
	0x32, 0x6f, 0x56, 0x14, 0x7d, 0x02, 0x1d, 0x5f, 0x64, 0xd1, 0x10, 0xb9, 0x7d, 0x5f, 0x4c, 0x8b,
	0x79, 0xcf, 0xe3, 0x2c, 0x97, 0xb8, 0x1d, 0x31, 0xa5, 0x8e, 0x92, 0x79, 0x28, 0x26, 0x7c, 0xe8,
	0x34, 0x91, 0xd1, 0x66, 0xa5, 0x49, 0xef, 0x43, 0xc3, 0x8b, 0x03, 0xa7, 0xb5, 0xde, 0xc0, 0x38,
	0xff, 0xd7, 0xe3, 0xe0, 0x82, 0x98, 0xf2, 0xb9, 0x3f, 0x0d, 0xe8, 0xd4, 0x37, 0x8e, 0x6a, 0xd3,
	0xc2, 0x20, 0x0b, 0x65, 0xab, 0x25, 0xf1, 0x14, 0x35, 0x99, 0x8e, 0x13, 0x9c, 0x9d, 0x0a, 0xed,
	0x2e, 0xd2, 0x4f, 0xf7, 0x08, 0x41, 0xbd, 0x48, 0x8b, 0x43, 0xe1, 0x35, 0xcf, 0x8b, 0x13, 0x1c,
	0xe1, 0x0d, 0x3c, 0x04, 0x95, 0x3c, 0x7c, 0xae, 0xbd, 0x06, 0xab, 0x0a, 0xa5, 0x8e, 0xc9, 0x27,
	0x3e, 0x2b, 0x8f, 0x09, 0x3e, 0xe9, 0x06, 0x2c, 0x4d, 0xbc, 0x71, 0xf6, 0xb7, 0x53, 0x92, 0x03,
	0x9e, 0x1b, 0xcf, 0x88, 0x0e, 0x56, 0xc6, 0xff, 0xd7, 0x60, 0xee, 0x57, 0x02, 0x9d, 0xfa, 0x5f,
	0x40, 0x1f, 0x83, 0x79, 0x2e, 0x64, 0xa8, 0x23, 0xae, 0x6c, 0xdd, 0x5b, 0xf4, 0xb7, 0x74, 0x5f,
	0x21, 0x88, 0x69, 0xe8, 0xed, 0x0e, 0x95, 0xbb, 0x09, 0xa6, 0xe2, 0xd2, 0x36, 0x98, 0xbb, 0x67,
	0x3b, 0x3d, 0xfb, 0x3f, 0xbc, 0xba, 0xed, 0xdd, 0x8f, 0x6f, 0x0e, 0xde, 0xbe, 0xec, 0x31, 0x9b,
	0x50, 0xc0, 0xab, 0x7b, 0xb2, 0xdf, 0x63, 0x3d, 0xdb, 0xf0, 0x9b, 0xfa, 0x90, 0x6f, 0xff, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0x89, 0xf4, 0x18, 0xdc, 0x05, 0x00, 0x00,
}
