syntax = "proto3";

package intangible;

message Vector {
    float x = 1;
    float y = 2;
    float z = 3;
};

message Source {
    // uri can be any web-retrievable URL, or a primitive under the "unit" schema, such as "unit:cube" or "unit:sphere". If archive is set, uri can be a relative path within the object that archive references.
    string uri = 1;
    Source archive = 2;
    // TODO(dichro): include download size and hash.
};

message Rendering {
    reserved 2, 3;
    reserved "mesh", "texture";
    WavefrontOBJ obj = 4;
    UnitGeometry unit = 5;
};

message API {
    // if endpoint is ws://, treat as connection to another server.
    string endpoint = 1;
    // TODO(dichro): standardized API IDs, to readily identify operations like transfer to another room, moving self/other, pick up/drop objects, etc.
    string name = 2;
    string description = 3;
    string avro_request_schema = 4;
    // TODO(dichro): Avro supports protocol specification, equivalent to multiple API objects. Use that? The server would be blind to the details of exposed RPCs. Does that matter? More importantly, the client would not know how many RPC options to represent without fetching and rendering schema, which seems less than ideal.
    // TODO(dichro): responses :P
};

message WavefrontOBJ {
    // obj is a Wavefront .OBJ mesh file.
    Source obj = 1;
    // mtls lists material files referenced by obj.
    map<string, Source> mtls = 2;
    // maps lists texture files referenced by obj.
    map<string, Source> maps = 3;
};

message UnitGeometry {
    enum Form {
        CUBE = 0;
        CYLINDER = 1;
        SPHERE = 2;
    }
    Form form = 1;
    Vector rescale = 2;
};

// Streamed from client to server. Compatible with old Object type.
message ClientUpdate {
    Vector position = 2;
    Vector rotation = 4;

    // TODO(dichro): these should move to a registration RPC in future; this message would then just be a Pose.
    Rendering rendering = 3;
    repeated API api = 7;
};

message PhotonVoiceChannel {
    string app_id = 1;
    string app_version = 2;
    string voice_app_id = 3;
    string room_name = 4;
};

// Streamed from server to client. Compatible with old Object type.
message ServerUpdate {
    // these describe an object
    string id = 1;
    Vector position = 2;
    Rendering rendering = 3;
    Vector rotation = 4;
    Vector bounding_box = 5;
    bool removed = 6;
    repeated API api = 7;
    Vector rescale = 9;

    // non-object-related updates
    PhotonVoiceChannel voice_chat = 8;
};
